
# Borrowing Strength with Linear Mixed Models: Julia-based MixedModels

## Setup

We produce the subject facets for the `sleepstudy` data including

+ observations
+ conditional means
+ within-subject slopes
+ estimate for pooled data

```{julia;term=true}
using DrWatson
@quickactivate "SMLP2020"
             
using MixedModels
using DataFrames, DataFramesMeta, CSV   
using Distributions: mean
using RCall  

R"""
library(tidyverse)
library(ggrepel)
"""
```
## Basics

### Fit the model

```{julia;term=true}
# retrieve the data
sleepstudy = MixedModels.dataset(:sleepstudy)
sleepstudy.days = convert(Array{Float64}, sleepstudy.days);

# reorder levels of Subject by mean of Reaction
subj_order = sort(combine(groupby(sleepstudy, :subj), :reaction => mean), :reaction_mean);
sleepstudy = @linq sleepstudy |> transform(subj = levels!(categorical(:subj), subj_order.subj));
sort!(sleepstudy, :subj);

# fit the model
m = fit(
    MixedModel,
    @formula(reaction ~ 1+days+(1+days|subj)), 
    sleepstudy,
)
```

### Extract conditional means

```{julia;term=true}
cms = only(ranef(m)) .+  m.Î²;
cms = DataFrame((subj = first(m.allterms).levels, Intercept = cms[1,:], days = cms[2,:]));
rename!(cms, ["subj", "day_0", "days"])
cms.estimate = "Conditional mean";
cms
 # CSV.write("cms.csv", cms);

 @rput sleepstudy 
 @rput cms
```

The next chunk shows how cms are retrieved with the new function `raneftables()`. Transition to new code is not complete yet.

```{julia;term=true; eval=false}
cms = DataFrame(first(raneftables(m))) 
```
To put these on the same scale as the by-subject regression coefficients we add in the fixed-effects estimates.

```julia
let fe = fixef(m1)
    ranefvals[2] .+= fe[1]
    ranefvals[3] .+= fe[2]
end;
describe(ranefvals)

#... and combine these values with the within-subject estimates

coefs = innerjoin(ranefvals, withinsubj, on = :subj);
@rput coefs
```

### Facet plot

```{julia;term=true}

R"""
plot1 <- 
  sleepstudy %>%
  ggplot(aes(x = days, y = reaction)) + 
  geom_point() +
  geom_abline(data=cms, aes(intercept = day_0, slope = days)) +
  facet_wrap(~ fct_rev(fct_rev(subj))) + 
  scale_x_continuous("Day", breaks=seq(0,9)) +
  scale_y_continuous("Reaction time [ms]", limits=c(100,500)) +
  theme_bw()
plot1

ggsave("figures/brrwstrngth1.pdf", width=7, height=7)
"""
```
## Demonstration of 'borrowing strength'

### Estimates of within-subject slopes

See [Bates@discourse.julialang.org, 2019-11](https://discourse.julialang.org/t/efficient-way-of-doing-linear-regression/31232/27).

```{julia;term=true}
linreg1(x::AbstractVector{T}, y::AbstractVector{T}) where {T<:AbstractFloat} = [ones(length(x)) x]\y

unit_id = first(m.allterms).levels;

wss = DataFrame(subj=unit_id, day_0 =.0, days =.0, estimate = "Within-subject");

for i in 1:length(unit_id)
  local unit_df
  unit_df = filter(row -> row.subj == unit_id[i], sleepstudy) 
  wss[i, 2:3] = linreg1(unit_df.days, unit_df.reaction)
end

@rput wss
```

### Estimates for pooled data

```{julia;term=true}
coef = linreg1(sleepstudy.days, sleepstudy.reaction);
pld = DataFrame(subj=unit_id, day_0=coef[1], days=coef[2], estimate = "Pooled");

@rput pld;
```

### Combine the estimates

```{julia;term=true}
cms_wss_pld = vcat(cms, wss, pld)
cms_wss_pld = @linq cms_wss_pld |>
       transform(
       estimate = levels!(categorical(:estimate), ["Conditional mean", "Within-subject", "Pooled"])
       );

@rput cms_wss_pld
```

### Combined facet plot

```{julia;term=true}
R"""
plot2 <- 
  sleepstudy %>%
  ggplot(aes(x = days, y = reaction)) + 
  geom_point() +
  geom_abline(data=cms_wss_pld, aes(intercept = day_0, slope = days, color = estimate)) +
  facet_wrap(~ fct_rev(fct_rev(subj))) +
  scale_x_continuous("Day", breaks=seq(0,9)) +
  scale_y_continuous("Reaction time [ms]", limits=c(100,500)) +
  scale_color_manual("Estimate", values=c("red", "green", "blue")) +
  theme_bw() +
  theme(legend.position = c(.9, .1))

# show the plot
plot2

ggsave("figures/brrwstrngth2.pdf", width=7, height=7)
"""
```

### Shrinkage plot

```{julia;term=true}
R"""
plot3 <-
  bind_rows(wss, cms) %>%
  ggplot(aes(x = day_0, y = days, color = estimate)) + 
  geom_point() + 
  geom_point(data = pld) + 
  geom_path(aes(group = subj), 
            arrow = arrow(length = unit(.02, "npc"),end="last")) + 
  scale_x_continuous("Reaction time @ day 0 [ms]", limits=c(200,300)) +
  scale_y_continuous("Change per day [ms]", limits=c(-5,25)) +
  scale_color_manual("Estimate", values=c("red", "green", "blue")) +
  geom_text_repel(data=wss, aes(x=day_0, y=days, label=subj)) +
  theme_bw() + theme(legend.position = "top") +
  ggtitle("'Borrowing Strength' (Shrinkage)")

plot3
ggsave("figures/brrwstrngth3.pdf", width=7, height=7)
"""
```
## Appendix

### Output options 

This script can be used to generate alternative source or output files.

```
julia> using Weave, IJulia
julia> convert_doc("notebooks/sleepstudy_borrowingstrength_MM.jmd", "notebooks/sleepstudy_borrowingstrength_MM.ipynb")
julia> convert_doc("notebooks/sleepstudy_borrowingstrength_MM.jmd", "notebooks/sleepstudy_borrowingstrength_MM.jl")
julia> IJulia.notebook(dir="notebooks")
```

The last command opens a Jupyter Notebook window. There you can refine the script and generate an HTML from `Files > Download as > HTML`.  For a PDF of this notebook, open the HTML in your browser and use normal export as PDF from there.

### Session information

```{julia;term=true}
using InteractiveUtils
versioninfo()
```